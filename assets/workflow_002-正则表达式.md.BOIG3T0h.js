import{_ as i,c as a,o as e,al as h}from"./chunks/framework.wpDTD1Tr.js";const c=JSON.parse('{"title":"正则表达式","description":"","frontmatter":{},"headers":[],"relativePath":"workflow/002-正则表达式.md","filePath":"workflow/002-正则表达式.md","lastUpdated":1741841476000}'),t={name:"workflow/002-正则表达式.md"};function n(l,s,d,p,k,o){return e(),a("div",null,s[0]||(s[0]=[h(`<h1 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h1><h2 id="_1-字面值字符" tabindex="-1">1. 字面值字符： <a class="header-anchor" href="#_1-字面值字符" aria-label="Permalink to &quot;1. 字面值字符：&quot;">​</a></h2><p>例如字母、数字、空格等，可以直接匹配它们自身。</p><h2 id="_2-特殊字符" tabindex="-1">2. 特殊字符： <a class="header-anchor" href="#_2-特殊字符" aria-label="Permalink to &quot;2. 特殊字符：&quot;">​</a></h2><p>例如点号 <code>.</code>、星号 <code>*</code>、加号 <code>+</code>、问号 <code>?</code> 等，它们具有特殊的含义和功能。 <code>*</code>：匹配前面的模式零次或多次。 <code>+</code>：匹配前面的模式一次或多次。 <code>?</code>：匹配前面的模式零次或一次。 <code>\\</code>：转义字符，用于匹配特殊字符本身。 <code>.</code>：匹配任意字符（除了换行符）。 <code>|</code>：用于指定多个模式的选择。</p><div class="tip custom-block"><p class="custom-block-title">贪婪匹配</p><p><code>*</code>会匹配尽可能多的字符（贪婪匹配） <code>*？</code> 匹配尽可能少的字符（非贪婪匹配）</p></div><p>eg:</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello 1234567 world&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">re.match(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;he.*?(\\d+).*rld&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,s)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_3-字符类" tabindex="-1">3. 字符类： <a class="header-anchor" href="#_3-字符类" aria-label="Permalink to &quot;3. 字符类：&quot;">​</a></h2><p>用方括号<code>[]</code>包围的字符集合，用于匹配方括号内的任意一个字符。</p><h2 id="_4-元字符" tabindex="-1">4. 元字符： <a class="header-anchor" href="#_4-元字符" aria-label="Permalink to &quot;4. 元字符：&quot;">​</a></h2><p>例如 <code>\\d</code>、<code>\\w</code>、<code>\\s</code> 等，用于匹配特定类型的字符，如数字、字母、空白字符等。</p><h2 id="_5-量词" tabindex="-1">5. 量词： <a class="header-anchor" href="#_5-量词" aria-label="Permalink to &quot;5. 量词：&quot;">​</a></h2><p>例如 <code>{n}</code>、<code>{n,}</code>、<code>{n,m}</code> 等，用于指定匹配的次数或范围。</p><h2 id="_6-边界符号" tabindex="-1">6. 边界符号： <a class="header-anchor" href="#_6-边界符号" aria-label="Permalink to &quot;6. 边界符号：&quot;">​</a></h2><p>例如 <code>^</code>、<code>$</code>、<code>\\b</code>、<code>\\B</code> 等，用于匹配字符串的开头、结尾或单词边界位置。 <code>^</code>：匹配字符串的开头。 <code>$</code>：匹配字符串的结尾。 <code>\\b</code>：匹配单词边界。 <code>\\B</code>：匹配非单词边界。</p><p>实际例子：<a href="./git/commit规范">commit 规范</a></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> commitRE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">((revert</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">wip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">draft): )</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(feat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">fix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">docs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">refactor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">perf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">build</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ci</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">chore)(</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\)</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{1,50}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,18)]))}const F=i(t,[["render",n]]);export{c as __pageData,F as default};
